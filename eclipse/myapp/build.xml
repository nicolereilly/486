<!--
     General purpose build script for web applications and web services.

     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web applicaiton.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.
-->


<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="WebApp" default="all" basedir=".">



	<!-- ===================== Property Definitions =========================== -->


	<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

	<property file="build.properties"/>
	<property file="${user.home}/build.properties"/>


	<!-- ==================== File and Directory Names ======================== -->


	<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "atlas".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  catalina.home        The directory in which you have installed
                       a binary distribution of Tomcat.  This will
                       be used by the "deploy" target.

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

  manager.password     The login password of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

  manager.url          The URL of the "/manager" web application on the
                       Tomcat installation to which we will deploy web
                       applications and web services.

  manager.username     The login username of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

-->

	<!-- NOTE: the following should be defined in build.properties:
	    app.name
	    app.version
	    catalina.home
	    manager.url
	    manager.username
	    manager.password
-->

	<property name="app.path"      value="/${app.name}"/>
	<property name="build.home"    value="${basedir}/build"/>
	<property name="dist.home"     value="${basedir}/dist"/>
	<property name="docs.home"     value="${basedir}/docs"/>
	<property name="src.home"      value="${basedir}/src"/>
	<property name="web.home"      value="${basedir}/web"/>
	<property name="lib.home"      value="${basedir}/lib"/>


	<!--  ==================== Compilation Control Options ==================== -->

	<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>



	<!-- ==================== External Dependencies =========================== -->


	<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

	<property name="servlet.jar"
           value="${lib.home}/servlet-2.3.jar"/>
	<property name="jaaslounge.jar"
           value="${lib.home}/jaaslounge-0.3.0.jar"/>
	<property name="jcifs.jar"
           value="${lib.home}/jcifs-1.1.11.jar"/>
	<property name="jcifs-ext.jar"
           value="${lib.home}/jcifs-ext-0.9.4.jar"/>
	<property name="activation.jar"
           value="${lib.home}/activation.jar"/>
	<property name="jcert.jar"
           value="${lib.home}/jcert.jar"/>
	<property name="jnet.jar"
           value="${lib.home}/jnet.jar"/>
	<property name="jsse.jar"
           value="${lib.home}/jsse.jar"/>
	<property name="mail.jar"
           value="${lib.home}/mail.jar"/>
	<property name="ojdbc14.jar"
           value="${lib.home}/ojdbc14.jar"/>


	<!-- ==================== Compilation Classpath =========================== -->

	<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

	<path id="compile.classpath">

		<!-- Include all JAR files that will be included in /WEB-INF/lib -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<!--
    <pathelement location="${jaaslounge.jar}"/>
    <pathelement location="${jcifs.jar}"/>
    <pathelement location="${jcifs-ext.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${jcert.jar}"/>
    <pathelement location="${jnet.jar}"/>
    <pathelement location="${jsse.jar}"/>
    <pathelement location="${mail.jar}"/>
    <pathelement location="${ojdbc14.jar}"/>
    -->

		<!-- Include all elements that Tomcat exposes to applications -->
		<pathelement location="${catalina.home}/common/classes"/>
		<fileset dir="${catalina.home}/common/endorsed">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${catalina.home}/common/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${catalina.home}/shared/classes"/>
		<fileset dir="${catalina.home}/shared/lib">
			<include name="*.jar"/>
		</fileset>

	</path>



	<!-- ==================== All Target ====================================== -->

	<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

	<target name="all" depends="clean,compile,dist,deploy"
   description="Clean build and dist directories, then compile"/>



	<!-- ==================== Clean Target ==================================== -->

	<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

	<target name="clean"
   description="Delete old build and dist directories">
		<delete dir="${build.home}"/>
		<delete dir="${dist.home}"/>
	</target>



	<!-- ==================== Compile Target ================================== -->

	<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

	<target name="compile" depends="prepare"
   description="Compile Java sources">

		<!-- Compile Java classes as necessary -->
		<mkdir    dir="${build.home}/WEB-INF/classes"/>
		<javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
			<classpath refid="compile.classpath"/>
		</javac>

		<!-- Copy application resources -->
		<copy  todir="${build.home}/WEB-INF/classes">
			<fileset dir="${src.home}" excludes="**/*.java"/>
		</copy>

		<!-- Copy web.xml -->
		<copy todir="${build.home}/WEB-INF/" file="web.xml" />

	</target>



	<!-- ==================== Dist Target ===================================== -->


	<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->


	<!--
  <target name="dist" depends="compile,javadoc"
-->
	<target name="dist" depends="compile"
   description="Create binary distribution">

		<!-- Copy documentation subdirectories -->
		<mkdir   dir="${dist.home}/docs"/>
		<copy    todir="${dist.home}/docs">
			<fileset dir="${docs.home}"/>
		</copy>

		<!-- Create application JAR file -->
		<jar jarfile="${dist.home}/${app.name}.war"
         basedir="${build.home}"/>

		<!-- Copy additional files to ${dist.home} as necessary -->

	</target>

	<target name="deploy" depends="dist" description="Deploy binary distribution">

		<copy todir="${catalina.home}/webapps">
			<fileset file="${dist.home}/${app.name}.war" />
		</copy>

	</target>

	<!-- ==================== Javadoc Target ================================== -->

	<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

	<target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

		<mkdir          dir="${dist.home}/docs/api"/>
		<javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
			<classpath refid="compile.classpath"/>
		</javadoc>

	</target>



	<!-- ==================== Prepare Target ================================== -->

	<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<mkdir  dir="${build.home}"/>
		<mkdir  dir="${build.home}/WEB-INF"/>
		<mkdir  dir="${build.home}/WEB-INF/classes"/>


		<!-- Copy static content of this web application -->
		<copy todir="${build.home}">
			<fileset dir="${web.home}"/>
		</copy>

		<!-- Copy external dependencies as required -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<mkdir  dir="${build.home}/WEB-INF/lib"/>

		<!--
    <copy todir="${build.home}/WEB-INF/lib" file="${jaaslounge.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${jcifs.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${jcifs-ext.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${activation.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${mail.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${ojdbc14.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${jcert.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${jnet.jar}"/>
    <copy todir="${build.home}/WEB-INF/lib" file="${jsse.jar}"/>
    -->

		<!-- Copy static files from external dependencies as needed -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

	</target>



</project>
